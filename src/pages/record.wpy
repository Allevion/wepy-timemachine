<style lang="less" type="text/less" scoped>
  .day-show{
    flex-grow: 1;
    text-align: center;
    border-bottom:solid dodgerblue;
    border-width: 1px;
    margin: 15px;
    color: dodgerblue;
  }
  .record-item{
    padding-top: 5px;
    padding-bottom: 5px;
  }
</style>

<template>
  <basepage class="basepage">
    <view class="list_body">
      <view @tap="changeMode">{{changeModeStr}}</view>
      <image wx:if="{{selectMode}}" class="margin-horizontal-small" style="width: 15px;height: 10px" src="../assets/images/change.png"/>
      <image wx:else class="margin-horizontal-small" style="width: 15px;height: 10px" src="../assets/images/down-arrow.png"/>
    </view>
    <view class="divider-horizontal"/>
    <view wx:if="{{selectMode}}" class="content">
      <view wx:if="{{dayMode}}" class="flex">
        <input @tap="dayBeginClick" class="day-show" value="{{dayBegin}}" disabled="{{true}}"/>
        <view>至</view>
        <input @tap="dayEndClick" class="day-show" value="{{dayEnd}}" placeholder="选填"  disabled="{{true}}"/>
      </view>
      <view wx:if="{{!dayMode}}" class="flex">
        <view class="day-show" style="margin:15px auto">{{month}}</view>
      </view>
      <view class="divider-horizontal"/>
      <datePicker id="datepicker" :selectDate.sync="selectDate" :withDay.sync="dayMode" ></datePicker>
      <view class="flex">
        <button class="btn-nagative" @tap="resetDate">重置</button>
        <button class="btn-positive" @tap="comfirm">确定</button>
      </view>
    </view>
    <view class="list margin-vertical">
      <repeat for="{{pageData.listData}}" index="index" item="item" key="key" >
        <!--<timeline :datas.sync="item"></timeline>-->
        <view class="record-item content">
          <view class="flex flex--main--between ">
            <view class="text-primary" style="font-size: 12px">{{item.realname}}{{item.phonenum}}</view>
            <view class="text-highlight">{{item.commissionamount}}</view>
          </view>
          <view class="flex flex--main--between">
            <view class="text-secondary margin-vertical-small">{{item.investtypename}}</view>
            <view class="text-secondary margin-vertical-small">{{item.createTime}}</view>
          </view>
        </view>
        <view class="divider-horizontal"></view>
      </repeat>
      <loadmore :isEnd.sync="isListEnd" ></loadmore>
      <!--<wxc-loadmore is-end="{{isListEnd}}"></wxc-loadmore>-->
    </view>
  </basepage>
</template>

<script>
  import basepage from 'src/components/basepage'
  import loadmore from 'src/components/loadmore'
  import datePicker from 'src/components/datePicker'
  import wepy from 'wepy'
  import timeUtils from 'src/utils/timeUtils'
  import objectUtils from '../utils/objectUtils'
  import req from '@/network'
  import BaseListPage from '@/base/baseListPage'
  import Basepage from '@/base/basepage'
  export default class Record extends wepy.page {
    mixins = [BaseListPage, Basepage] //  注意顺序
    config = {
      navigationBarTitleText: '明细',
      usingComponents: {
        'wxc-toast': '../../packages/@minui/wxc-toast/dist/index',
        // 'wxc-loadmore': '../../packages/@minui/wxc-loadmore/dist/index'
      }
    }
    components = {
      basepage: basepage,
      datePicker: datePicker,
      loadmore: loadmore
    }
    data = {
      changeModeStr: timeUtils.formatDate(new Date(), 'yyyy-MM'),
      changeModeIcon: '',
      selectDate: timeUtils.formatDate(new Date(), 'yyyy-MM-dd'),
      selectMode: false,
      dayChangeFocus: 'month',
      dayMode: false,
      dayBegin: timeUtils.formatDate(new Date(), 'yyyy-MM-dd'),
      dayEnd: null,
      month: timeUtils.formatDate(new Date(), 'yyyy-MM'),
    }
    methods = {
      dayBeginClick() {
        this.selectDate = this.dayBegin
        this.dayChangeFocus = 'day1'
        this.$apply()
      },
      dayEndClick() {
        if (!this.dayEnd) {
          this.dayEnd = timeUtils.formatDate(new Date(), 'yyyy-MM-dd')
          this.selectDate = this.dayEnd
        }
        this.dayChangeFocus = 'day2'
        this.$apply()
      },
      changeMode() {
        if (this.selectMode) {
          this.dayMode = !this.dayMode
        } else {
          this.selectMode = true
        }
        if (this.dayMode) {
          this.changeModeStr = '按天选择'
        } else {
          this.changeModeStr = '按月选择'
        }
        this.$apply()
      },
      comfirm() {
        this.selectMode = false
        if (this.dayMode) {
          this.changeModeStr = this.dayBegin
          if (!objectUtils.isEmpty(this.dayEnd)) {
            this.changeModeStr = this.changeModeStr + '/' + this.dayEnd
          }
        } else {
          this.changeModeStr = this.month
        }
        this.$apply()
        this.$wxpage.onPullDownRefresh()
      },
      resetDate() {
        this.dayEnd = null
        this.month = timeUtils.formatDate(new Date(), 'yyyy-MM')
        this.dayMode = false
        this.$apply()
      }
    }
    computed = {
      // getDate () {
      //   // return timeUtils.formatDate(this.selectDate, 'yyyy-MM-dd')
      //   return timeUtils.formatDate(this.selectDate, 'yyyy-MM-dd')
      // }
    }
    events = {}
    watch = {
      selectDate(curVal) {
        console.debug('record selectDate change:' + curVal)
        if (this.dayChangeFocus === 'month') {
          this.month = curVal.substr(0, 7)
        } else if (this.dayChangeFocus === 'day1') {
          this.dayBegin = curVal
        } else if (this.dayChangeFocus === 'day2') {
          this.dayEnd = curVal
        }
        this.applyAsync()
      },
      dayMode(curVal) {
        if (curVal === true) {
          this.dayChangeFocus = 'day1'
        } else {
          this.dayChangeFocus = 'month'
        }
        this.applyAsync()
      },
      dayChangeFocus(curVal) {
        console.debug('change focus' + curVal)
        if (curVal === 'month') {
          console.debug('change focus this.month ' + this.month)
          this.selectDate = this.month + '-01'
        } else if (curVal === 'day1') {
          console.debug('change focus this.dayBegin ' + this.dayBegin)
          this.selectDate = this.dayBegin
        } else if (curVal === 'day2') {
          console.debug('change focus this.dayEnd ' + this.dayEnd)
          this.selectDate = this.dayEnd
        }
        this.applyAsync()
      }
    }
    onLoad() {
      // console.log((new Date()).getTime())
    }
    requestData() {
      let fromDate = null
      let toDate = null
      if (this.dayMode) {
        fromDate = this.dayBegin
        toDate = this.dayEnd | timeUtils.formatDate(new Date(), 'yyyy-MM-dd')
      } else {
        fromDate = this.month
        toDate = this.month
      }
      const params = {
        financialManager: wepy.$instance.globalData.memberId,
        fromDate: fromDate,
        toDate: toDate,
        pageNum: this.getNextIndex(),
        pageSize: this.pageData.pager.pageSize
      }
      req.post('financeDetail.htm', params)
        .then(res => {
          this.afterRequstData(res)
        })
    }
    getListData(res) {
      return res.stepInfoResponse.list
    }
    getIsEnd(res) {
      return !(res.stepInfoResponse && res.stepInfoResponse.list && res.stepInfoResponse.list.length === this.pageData.pager.pageSize)
    }
  }
</script>
